{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [],
		"devdoc": {
			"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier available, which can be aplied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them.",
			"kind": "dev",
			"methods": {},
			"stateVariables": {
				"_guardCounter": {
					"details": "counter to allow mutex lock with only one SSTORE operation"
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"rabbit-bsc/ESPStrategy/espLiquidateStrategy.sol": "ReentrancyGuard"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"rabbit-bsc/ESPStrategy/espLiquidateStrategy.sol": {
			"keccak256": "0x8878e81900392e53c4a562fd4719460c2a7a732318a8aa8a381848bc427aba50",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://f1f205f91a7beaf6fad42122530e3a208896f8c52adc15dd0304ae4679df1b2f",
				"dweb:/ipfs/QmXdoSbzES2QNc2c2yeCfv14Uzmn4mXx8HnXSb3qJSNaNg"
			]
		}
	},
	"version": 1
}